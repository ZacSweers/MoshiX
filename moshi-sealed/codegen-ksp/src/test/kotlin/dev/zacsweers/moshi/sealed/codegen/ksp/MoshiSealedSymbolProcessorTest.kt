package dev.zacsweers.moshi.sealed.codegen.ksp

import com.google.common.truth.Truth.assertThat
import com.google.devtools.ksp.processing.SymbolProcessor
import com.tschuchort.compiletesting.KotlinCompilation
import com.tschuchort.compiletesting.KotlinCompilation.ExitCode
import com.tschuchort.compiletesting.SourceFile
import com.tschuchort.compiletesting.kspSourcesDir
import org.junit.Ignore
import org.junit.Test
import java.io.File
import java.util.ServiceLoader

@Ignore("Pending new release of kotlin compile testing")
class MoshiSealedSymbolProcessorTest {
  @Test
  fun checkServiceLoader() {
    val processors = ServiceLoader.load(SymbolProcessor::class.java).iterator().asSequence().toSet()
    assertThat(processors.any { it is MoshiSealedSymbolProcessor }).isTrue()
  }

  @Test
  fun smokeTest() {
    val source = SourceFile.kotlin("CustomCallable.kt", """
      package test
      import com.squareup.moshi.JsonClass
      import dev.zacsweers.moshisealed.annotations.TypeLabel
      @JsonClass(generateAdapter = true, generator = "sealed:type")
      sealed class BaseType {
        @TypeLabel("a")
        class TypeA : BaseType()
        @TypeLabel("b")
        class TypeB : BaseType()
      }
    """)

    val compilation = KotlinCompilation().apply {
      sources = listOf(source)
      inheritClassPath = true
      // TODO re-enable with new compile testing release
//      symbolProcessors = listOf(MoshiSealedSymbolProcessor())
    }
    val result = compilation.compile()
    assertThat(result.exitCode).isEqualTo(ExitCode.OK)
    val generatedSourcesDir = compilation.kspSourcesDir
    val generatedFile = File(generatedSourcesDir, "test/BaseTypeJsonAdapter.kt")
    assertThat(generatedFile.exists()).isTrue()
    assertThat(generatedFile.readText()).isEqualTo("""
      // Code generated by moshi-sealed. Do not edit.
      package test
      import com.squareup.moshi.JsonAdapter
      import com.squareup.moshi.JsonReader
      import com.squareup.moshi.JsonWriter
      import com.squareup.moshi.Moshi
      import com.squareup.moshi.adapters.PolymorphicJsonAdapterFactory
      import kotlin.Suppress
      import kotlin.collections.emptySet
      class BaseTypeJsonAdapter(
        moshi: Moshi
      ) : JsonAdapter<BaseType>() {
        @Suppress("UNCHECKED_CAST")
        private val runtimeAdapter: JsonAdapter<BaseType> =
            PolymorphicJsonAdapterFactory.of(BaseType::class.java, "type")
                .withSubtype(BaseType.TypeA::class.java, "a")
                .withSubtype(BaseType.TypeB::class.java, "b")
                .create(BaseType::class.java, emptySet(), moshi) as JsonAdapter<BaseType>
        override fun fromJson(reader: JsonReader): BaseType? = runtimeAdapter.fromJson(reader)
        override fun toJson(writer: JsonWriter, value: BaseType?) {
          runtimeAdapter.toJson(writer, value)
        }
      }
    """.trimIndent())
  }

}