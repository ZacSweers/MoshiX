package dev.zacsweers.moshix.sealed.codegen.ksp

import com.google.common.truth.Truth.assertThat
import com.tschuchort.compiletesting.KotlinCompilation
import com.tschuchort.compiletesting.KotlinCompilation.ExitCode
import com.tschuchort.compiletesting.SourceFile
import com.tschuchort.compiletesting.kspSourcesDir
import com.tschuchort.compiletesting.symbolProcessors
import org.junit.Test
import java.io.File

class MoshiSealedSymbolProcessorTest {
  @Test
  fun smokeTest() {
    val source = SourceFile.kotlin("CustomCallable.kt", """
      package test
      import com.squareup.moshi.JsonClass
      import dev.zacsweers.moshix.sealed.annotations.TypeLabel

      @JsonClass(generateAdapter = true, generator = "sealed:type")
      sealed class BaseType {
        @TypeLabel("a", ["aa"])
        class TypeA : BaseType()
        @TypeLabel("b")
        class TypeB : BaseType()
      }
    """)

    val compilation = KotlinCompilation().apply {
      sources = listOf(source)
      inheritClassPath = true
      symbolProcessors = listOf(MoshiSealedSymbolProcessor())
    }
    val result = compilation.compile()
    assertThat(result.exitCode).isEqualTo(ExitCode.OK)
    val generatedSourcesDir = compilation.kspSourcesDir
    val generatedAdapter = File(generatedSourcesDir, "kotlin/test/BaseTypeJsonAdapter.kt")
    assertThat(generatedAdapter.exists()).isTrue()
    //language=kotlin
    assertThat(generatedAdapter.readText().trim()).isEqualTo("""
      // Code generated by moshi-sealed. Do not edit.
      package test
      
      import com.squareup.moshi.JsonAdapter
      import com.squareup.moshi.JsonReader
      import com.squareup.moshi.JsonWriter
      import com.squareup.moshi.Moshi
      import com.squareup.moshi.adapters.PolymorphicJsonAdapterFactory
      import kotlin.Suppress
      import kotlin.Unit
      import kotlin.collections.emptySet
      
      public class BaseTypeJsonAdapter(
        moshi: Moshi
      ) : JsonAdapter<BaseType>() {
        @Suppress("UNCHECKED_CAST")
        private val runtimeAdapter: JsonAdapter<BaseType> =
            PolymorphicJsonAdapterFactory.of(BaseType::class.java, "type")
              .withSubtype(BaseType.TypeA::class.java, "a")
              .withSubtype(BaseType.TypeA::class.java, "aa")
              .withSubtype(BaseType.TypeB::class.java, "b")
              .create(BaseType::class.java, emptySet(), moshi) as JsonAdapter<BaseType>
      
      
        public override fun fromJson(reader: JsonReader): BaseType? = runtimeAdapter.fromJson(reader)
      
        public override fun toJson(writer: JsonWriter, value: BaseType?): Unit {
          runtimeAdapter.toJson(writer, value)
        }
      }
    """.trimIndent())

    val proguardFiles = generatedSourcesDir.walkTopDown().filter { it.extension == "pro" }.toList()
    check(proguardFiles.isNotEmpty())
    proguardFiles.forEach { generatedFile ->
      when (generatedFile.nameWithoutExtension) {
        "moshi-sealed-test.BaseType" -> assertThat(generatedFile.readText()).contains(
          """
          -if class test.BaseType
          -keepnames class test.BaseType
          -if class test.BaseType
          -keep class test.BaseTypeJsonAdapter {
              public <init>(com.squareup.moshi.Moshi);
          }
          """.trimIndent()
        )
        else -> error("Unrecognized proguard file: $generatedFile")
      }
    }
  }
}